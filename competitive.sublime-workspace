{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"do",
				"doweneedtoadd\tbool doweneedtoadd"
			],
			[
				"rs",
				"rstrip\tfunction"
			],
			[
				"lef",
				"left_pizza"
			],
			[
				"righ",
				"right_halfs"
			],
			[
				"left",
				"left_pizza\tint left_pizza"
			],
			[
				"sync",
				"sync_with_stdio\tbool ios_base::sync_with_stdio()"
			],
			[
				"fact",
				"factors"
			],
			[
				"solv",
				"solve_rec_util\tfunction"
			],
			[
				"time",
				"time_it\tfunction"
			],
			[
				"get",
				"get_factors"
			],
			[
				"poss",
				"possibilities\tparam"
			],
			[
				"pss",
				"possibilities"
			],
			[
				"ex",
				"extract_lottery_number\tfunction"
			],
			[
				"basd",
				"bad_case3\tstatement"
			],
			[
				"bad",
				"bad_case2\tstatement"
			],
			[
				"push",
				"push_back\tvoid push_back(value_type &&__x)"
			],
			[
				"print",
				"print_factorization\tvoid print_factorization(long long n)"
			],
			[
				"nbr",
				"nbry\tint nbry"
			],
			[
				"re",
				"resize\tvoid resize(size_type __new_size)"
			],
			[
				"int",
				"intersect\tbool intersect(Segment s1, Segment s2)"
			],
			[
				"lies",
				"multiplies\tmultiplies<typename _Tp>"
			],
			[
				"lie",
				"lies_between\tbool lies_between(Point a, Point b, Point c)"
			],
			[
				"con",
				"cond_y\tbool cond_y"
			],
			[
				"cond",
				"cond_x\tbool cond_x"
			],
			[
				"can",
				"cand_w\tstatement"
			],
			[
				"sum",
				"sum_wi_x_di\tstatement"
			],
			[
				"dist",
				"distances\tstatement"
			],
			[
				"stat",
				"statistics\tmodule"
			],
			[
				"fin",
				"find_radius_v2\tfunction"
			],
			[
				"hig",
				"highest_power_of_p"
			],
			[
				"prime",
				"prime_factorization\tvector<pair<int, int> > prime_factorization(int n)"
			],
			[
				"syc",
				"sync_with_stdio\tbool ios_base::sync_with_stdio()"
			],
			[
				"pri",
				"prime_factorization\tvector<pair<int, int> > prime_factorization(int n)"
			],
			[
				"prim",
				"prime_factorization\tvector<pair<int, int> > prime_factorization(int n)"
			],
			[
				"S",
				"S02/\tDir"
			],
			[
				"B",
				"Brooklyn Nine-Nine/\tDir"
			],
			[
				"Haris",
				"Harish_1TB/\tDir"
			],
			[
				"INT",
				"INT_MAX"
			],
			[
				"nu",
				"num_nodes"
			],
			[
				"add",
				"add_color"
			],
			[
				"par",
				"parent"
			],
			[
				"def",
				"defaultdict\tclass"
			],
			[
				"y_t",
				"y_train\tstatement"
			],
			[
				"Y_",
				"y_train\tstatement"
			],
			[
				"u",
				"utils"
			],
			[
				"s",
				"struct\tstruct"
			],
			[
				"is",
				"isprime_fermat"
			],
			[
				"abb",
				"abbr_months\tstatement"
			],
			[
				"dis",
				"dijsktra"
			],
			[
				"hash",
				"hash_2\tunordered_map<int, vector<int> > hash_2"
			],
			[
				"puh",
				"push_back\tvoid push_back(value_type &&__x)"
			],
			[
				"last",
				"last_action\tparam"
			],
			[
				"INT_MAX",
				"INT_MAX\tINT_MAX"
			],
			[
				"in",
				"invisible_lanterns"
			],
			[
				"be",
				"begin\titerator begin()"
			],
			[
				"dp",
				"dp_gym\tstatement"
			],
			[
				"n",
				"num_of_days\tstatement"
			],
			[
				"sel",
				"selection_sort\tvoid selection_sort(int *a, int n)"
			],
			[
				"qui",
				"quick_sort\tvoid quick_sort(int *a, int p, int q)"
			],
			[
				"piv",
				"pivot_index"
			],
			[
				"CLOCK_PER",
				"CLOCKS_PER_SEC\tCLOCKS_PER_SEC"
			],
			[
				"clo",
				"clock_tick\tdouble clock_tick"
			],
			[
				"p",
				"period\tperiod"
			],
			[
				"max",
				"max_xor\tfunction"
			],
			[
				"lar",
				"largest_connected_component\tfunction"
			],
			[
				"la",
				"largest"
			],
			[
				"Def",
				"defaultdict\tclass"
			],
			[
				"del",
				"delim"
			],
			[
				"num",
				"numpunct\tnumpunct<typename _CharT>()"
			],
			[
				"ans",
				"ans_i"
			],
			[
				"lengt",
				"length_of_contig_0\tvector<int> length_of_contig_0"
			],
			[
				"leng",
				"length_of_contig_0"
			],
			[
				"bit",
				"bit_number"
			],
			[
				"ma",
				"max_set_bit"
			],
			[
				"bin",
				"bind2nd\tbinder2nd<_Operation> bind2nd(const _Operation &__fn, const _Tp &__x)"
			],
			[
				"sub",
				"sub_cost2\tstatement"
			],
			[
				"y",
				"y_set\tstatement"
			],
			[
				"x",
				"x_set\tstatement"
			],
			[
				"inde",
				"independent_bits_engine\tindependent_bits_engine<typename _RandomNumberEngine, size_t __w, typename _UIntType>"
			],
			[
				"cost",
				"costs_i\tvector<int> costs_i"
			],
			[
				"to",
				"total_cost"
			],
			[
				"new_",
				"new_soi\tint new_soi"
			],
			[
				"ne",
				"nextafter\tfloat nextafter(float __x, float __y)"
			],
			[
				"op",
				"option\tstatement"
			],
			[
				"mem",
				"memoize\tfunction"
			],
			[
				"st",
				"strip\tfunction"
			],
			[
				"di",
				"dijsktra"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"fil",
				"filter\tfunction"
			],
			[
				"for",
				"for\tfor … done"
			],
			[
				"read",
				"read_int\tunit -> int"
			],
			[
				"int_of",
				"int_of_string\tstring -> int"
			],
			[
				"exc",
				"Exception\tclass"
			],
			[
				"ab",
				"abs_pos"
			],
			[
				"mak",
				"make_moves\tfunction"
			],
			[
				"pla",
				"player"
			],
			[
				"moval",
				"movable_coins〔variable〕"
			],
			[
				"update",
				"updateStatusBar"
			],
			[
				"updat",
				"update_status"
			],
			[
				"PY",
				"PyQt5〔module〕"
			],
			[
				"Lud",
				"LudoView"
			],
			[
				"file",
				"filesize"
			],
			[
				"vpl",
				"vpl_execution"
			],
			[
				"user",
				"user_pi"
			],
			[
				"resp",
				"responseText\t XMLHttpRequest"
			],
			[
				"on",
				"onreadystatechange〔variable〕"
			],
			[
				"fram",
				"frameCount〔variable〕"
			],
			[
				"lo",
				"lower〔variable〕"
			],
			[
				"extract",
				"extracthand〔function〕"
			],
			[
				"ra",
				"raw_input〔function〕"
			],
			[
				"co",
				"ccomp"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lets-start-again/19-the-next-palindrome.cpp",
			"settings":
			{
				"buffer_size": 948,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "ans = 0\nfor i in range(1, 1000):\n    if i % 3 == 0 or i % 5 == 0:\n        ans += i\n\nprint(ans)",
			"file": "project-euler/01-multiples-of-3-and-5.py",
			"file_size": 94,
			"file_write_time": 132193515799214021,
			"settings":
			{
				"buffer_size": 94,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 304.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"indent",
				"Indentation: Convert to Spaces"
			],
			[
				"ss mark",
				"Set Syntax: Markdown GFM"
			],
			[
				"autopep",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"delet",
				"CSV: Delete column"
			],
			[
				"csv set",
				"CSV: Set delimiter"
			],
			[
				"advance",
				"Set Syntax: Advanced CSV"
			],
			[
				"wor",
				"Word Wrap: Toggle"
			],
			[
				"ss csv",
				"Set Syntax: Advanced CSV"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"auto pep",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"ss py",
				"Set Syntax: Python"
			],
			[
				"renam",
				"File: Rename"
			],
			[
				"push",
				"git: push (force)"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"move",
				"File: Move"
			],
			[
				"ss markd",
				"Set Syntax: Markdown GFM"
			],
			[
				"ss md",
				"Set Syntax: Markdown GFM"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"auto pe",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"inset",
				"Insert Nums"
			],
			[
				"auto",
				"Auto indent"
			],
			[
				"inse",
				"Insert Nums"
			],
			[
				"ss c++",
				"Set Syntax: C++"
			],
			[
				"jus",
				"CSV: Justify columns"
			],
			[
				"comp",
				"CSV: Compact columns"
			],
			[
				"ju",
				"CSV: Justify columns"
			],
			[
				"deli",
				"CSV: Set delimiter"
			],
			[
				"csv",
				"CSV: Justify columns"
			],
			[
				"inser",
				"Insert Nums"
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"ssh conf",
				"Set Syntax: SSH Config"
			],
			[
				"ss c",
				"Set Syntax: C++"
			],
			[
				"ss cpp",
				"EasyClangComplete: Show popup info"
			],
			[
				"git push",
				"git: push"
			],
			[
				"i",
				"InsertNums - No Preview"
			],
			[
				"del",
				"File: Delete"
			],
			[
				"de",
				"File: Delete"
			],
			[
				"d",
				"File: Delete"
			],
			[
				"mov",
				"File: Move"
			],
			[
				"REN",
				"Rename File"
			],
			[
				"w",
				"Word Wrap: Toggle"
			],
			[
				"ss mar",
				"Set Syntax: Markdown GFM"
			],
			[
				"rne",
				"Rename File"
			],
			[
				"diff",
				"git: diff"
			],
			[
				"push ",
				"git: push (force)"
			],
			[
				"autom",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"re",
				"File: Rename"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"push fo",
				"git: push (force)"
			],
			[
				"rn",
				"Rename File"
			],
			[
				"ss ++",
				"Set Syntax: C++"
			],
			[
				"r",
				"File: Rename"
			],
			[
				"push for",
				"git: push (force)"
			],
			[
				"git log",
				"git: log"
			],
			[
				"ss marko",
				"Set Syntax: Markdown"
			],
			[
				"ss c+",
				"Set Syntax: C++"
			],
			[
				"gt push",
				"git: push"
			],
			[
				"dw",
				"Word Wrap: Toggle"
			],
			[
				"git pull",
				"git: pull with rebase"
			],
			[
				"GIT PULL",
				"git: pull with rebase"
			],
			[
				"pus",
				"git: push (force)"
			],
			[
				"gist",
				"Gist: Create Public Gist"
			],
			[
				"SS MARKD",
				"Set Syntax: Markdown GFM"
			],
			[
				"GIST",
				"Gist: Create Public Gist"
			],
			[
				"KEY",
				"Preferences: Key Bindings"
			],
			[
				"key",
				"Preferences: Terminal Key Bindings – User"
			],
			[
				"doc",
				"DocBlockr: Decorate line comment"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"gdb",
				"SublimeGDB: Start Debugging"
			],
			[
				"SUBLI",
				"SublimeGDB: Start Debugging"
			],
			[
				"GDB",
				"SublimeGDB: Start Debugging"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"easyt",
				"EasyClangComplete: Open completion triggers location"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: remov",
				"Package Control: Remove Package"
			],
			[
				"MARDO PRE",
				"Markdown Preview: Preview in Browser"
			],
			[
				"linti",
				"SublimeLinter: Enable Linting"
			],
			[
				"MARKDO",
				"Markdown Preview: Preview in Browser"
			],
			[
				"MARDO GFM",
				"Set Syntax: Markdown GFM"
			],
			[
				"MARK",
				"Set Syntax: Markdown"
			],
			[
				"nums",
				"Insert Nums"
			],
			[
				"TERMINAL",
				"Preferences: Terminal Settings – Default"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"num",
				"Insert Nums"
			],
			[
				"ss",
				"Set Syntax: Python"
			],
			[
				"ss magic",
				"Set Syntax: MagicPython"
			],
			[
				"ss pyth",
				"Set Syntax: Python"
			],
			[
				"dle",
				"File: Delete"
			],
			[
				"convert ",
				"Indentation: Convert to Spaces"
			],
			[
				"sspyt",
				"Set Syntax: Python"
			],
			[
				"ss ocam",
				"Set Syntax: OCaml"
			],
			[
				"sort",
				"CSV: Sort Column (Ascending)"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			],
			[
				"autop",
				"Preferences: AutoPep8 Settings – Default"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"linter",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"wkhtml",
				"wkhtmltopdf: Issues"
			],
			[
				"wktml",
				"wkhtmltopdf: Documentation (English)"
			],
			[
				"wk",
				"Preferences: wkhtmltopdf: Settings"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"packa isnta",
				"Package Control: Install Package"
			],
			[
				"package",
				"Preferences: Package Control Settings – Default"
			],
			[
				"packages",
				"Preferences: Package Control Settings – Default"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"SA",
				"Set Syntax: ANSI"
			],
			[
				" SSA",
				"Set Syntax: ANSI"
			],
			[
				"SS ANS",
				"Set Syntax: ANSI"
			],
			[
				"SS ASN",
				"Set Syntax: ANSI"
			],
			[
				"SS",
				"Set Syntax: ANSI"
			],
			[
				"stat",
				"git: status"
			],
			[
				"SS ",
				"Set Syntax: ANSI"
			],
			[
				"Package Control: INT",
				"Package Control: Install Package"
			],
			[
				"Package Control: REMO",
				"Package Control: Remove Package"
			],
			[
				"SSANS",
				"Set Syntax: ANSI"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"git",
				"git: status"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"status",
				"git: status"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"p",
				"Package Control: Remove Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"pakage Control:ena",
				"Package Control: Enable Package"
			],
			[
				"python",
				"Set Syntax: MagicPython"
			],
			[
				"git ",
				"git: status"
			],
			[
				"Package Control: di",
				"Package Control: Disable Package"
			],
			[
				"markdown pre",
				"Markdown Preview: Preview in Browser"
			]
		],
		"width": 605.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(/home/hthuwal/.local/share/anaconda/run/LudoBot/anaconda.sock)",
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(/home/hthuwal/.local/share/anaconda/run/Ludo\\ Bot/anaconda.sock)",
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(/home/hthuwal/.local/share/anaconda/run/Ludo Bot/anaconda.sock)",
			"rename youtube",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/hthuwal/Applications/scihub/scihub.py",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/18-candy3.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/19-the-next-palindrome.cpp",
		"/home/hthuwal/dev/hthuwal.github.io/shayari.md",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/17-alphacode.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/14-rectangles.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/16-julka.py",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/15-the-last-digits.cpp",
		"/tmp/editor-_uyp1s5y.cpp",
		"/tmp/editor-vd9jrslz.cpp",
		"/home/hthuwal/Downloads/Torrents/Harish/The Boys/links.txt",
		"/tmp/editor-74fe0gs_.cpp",
		"/tmp/editor-rzzxi19_.cpp",
		"/tmp/editor-a0rex3c3.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/13-to-and-fro.cpp",
		"/home/hthuwal/Downloads/Torrents/Harish/Bodyguard/links.txt",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/12-bytelandian-gold-coins.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/11-fashion-shows.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/08-feynman.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/10-candy1.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/09-whats-next.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/06-reverse-the-notation.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/07-number-steps.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/05-small-factorials.py",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/04-factorial.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/03-adding-reversed-numbers.py",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/01-life-the-universe-and-everything.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lets-start-again/02-prime-generator-prime1.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/easy-dijsktra.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/converting.cpp",
		"/home/hthuwal/Competitive Programming/Programming/Codechef/rich-substrings.cpp",
		"/home/hthuwal/.local/share/applications/synergy.desktop",
		"/home/hthuwal/Competitive Programming/Programming/Codechef/chef-and-pepperoni-pizza.cpp",
		"/home/hthuwal/Competitive Programming/Programming/Codechef/chef-drinks-coke.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/divide_number.md",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/gergovia.cpp",
		"/home/hthuwal/Competitive Programming/Programming/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/perfect-cubes.cpp",
		"/home/hthuwal/Competitive Programming/Programming/lottery.py",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/ilya-and-a-colorful-walk.cpp",
		"/tmp/editor-gljymy9w.cpp",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/alyona-and-a-narrow-fridge.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/three-circle-problem.md",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/help-tohu.md",
		"/home/hthuwal/.bashrc",
		"/home/hthuwal/.zshrc",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/kth-prime.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/tic-tac-toe-1.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/tic-tac-toe-2.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/integer-factorization-15-digits.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/black-and-white.py",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/validate-a-maze.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/gopu-and-digits-divisibility.py",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/shortest-reach-2.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/partitions.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/manku-word.py",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/non-intersecting-segments.cpp",
		"/home/hthuwal/Downloads/Telegram Desktop/086341552770_elasticloadbalancing_ap",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/huge-stones.py",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/wet-clothes.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/out2.txt",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/does-it-divide-brute.py",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/does-it-divide.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/out.txt",
		"/home/hthuwal/Competitive Programming/Programming/Algos_Implementation/primalitytest.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/primality-sieve.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/out.txt",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/primality-fermat.cpp",
		"/home/hthuwal/Competitive Programming/Programming/Mixed/cpp/sieve.cpp",
		"/tmp/editor-wgpi3xpd.cpp",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/the-ball-game.md",
		"/home/hthuwal/.ssh/config",
		"/tmp/editor-wlf3ho8v.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/magic-square-forming.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/temp.py",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/01.cpp",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/02.cpp",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/04.cpp",
		"/home/hthuwal/Competitive Programming/Programming/Interview_bit/painters-partition-problem.md",
		"/home/hthuwal/Competitive Programming/Programming/khushboo.c",
		"/home/hthuwal/Competitive Programming/Programming/SPOJ/travelling-salesman-problem.c",
		"/home/hthuwal/Competitive Programming/Programming/Algos_Implementation/hamiltonian_walk_exists_or_not.cpp",
		"/home/hthuwal/Competitive Programming/Programming/gfg/circle-of-strings.cpp",
		"/home/hthuwal/Competitive Programming/Programming/gfg/in.txt",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/beautiful-path.cpp",
		"/home/hthuwal/js_utils/env/bin/phantomjs",
		"/home/hthuwal/bin/ffmpeg-bar",
		"/home/hthuwal/Competitive Programming/Programming/HackerEarth/booboo-and-upsolving-circuits.cpp",
		"/home/hthuwal/dev/IITD/Sem1/COP701/github-analytics/requirements.txt",
		"/home/hthuwal/kt/test.cpp",
		"/home/hthuwal/kt/in.txt",
		"/home/hthuwal/kt/test.py",
		"/home/hthuwal/Competitive Programming/Programming/Interview_bit/search-a-range.md",
		"/home/hthuwal/kt/kt.py",
		"/home/hthuwal/kt/kt2.py",
		"/home/hthuwal/Competitive Programming/Programming/Interview_bit/multiply-strings.cpp",
		"/home/hthuwal/kt/fib.py",
		"/home/hthuwal/Competitive Programming/Programming/test.cpp",
		"/home/hthuwal/Competitive Programming/Programming/out.txt",
		"/home/hthuwal/Competitive Programming/Programming/target.txt",
		"/home/hthuwal/Competitive Programming/Programming/LeetCode/perfect-squares.md",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/journey-to-moon.cpp",
		"/home/hthuwal/Competitive Programming/Programming/CodeForces/heaters.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/equal.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/julia.py",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/minimum-time-required.cpp",
		"/home/hthuwal/Competitive Programming/Programming/.gitignore",
		"/home/hthuwal/Competitive Programming/Programming/LeetCode/aditi.py",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/balanced-forest.cpp",
		"/home/hthuwal/Competitive Programming/Programming/rsm.py",
		"/home/hthuwal/Competitive Programming/Programming/special_palindrome_again.cpp",
		"/home/hthuwal/Competitive Programming/Programming/gfg/the-painters-partition.cpp",
		"/home/hthuwal/Competitive Programming/Programming/gfg/is-valid-ip.cpp",
		"/home/hthuwal/Competitive Programming/Programming/gfg/possible-words-from-phone-digits.cpp",
		"/home/hthuwal/Competitive Programming/Programming/Mixed/graph-using-adjacency-list-in-c.cpp",
		"/home/hthuwal/Competitive Programming/Programming/graph-using-adjacency-list-in-c.cpp",
		"/home/hthuwal/Competitive Programming/Programming/modulo_fermat's_theorem.py",
		"/home/hthuwal/Competitive Programming/Programming/graph using adjacency list in c.cpp",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/wget-log",
		"/home/hthuwal/Competitive Programming/Programming/HackerRank/climbing-the-leaderboard.md",
		"/home/hthuwal/Downloads/retrained_labels.txt",
		"/home/hthuwal/dev/sign-language-gesture-recognition/retrain.py",
		"/home/hthuwal/Competitive Programming/Programming/Algos_Implementation/fenwick-or-binary-index-tree.cpp"
	],
	"find":
	{
		"height": 32.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"llrintf64x(_Float64x __x) ",
			"int",
			"720p.10bit.WEBRip.2CH.x265.HEVC-PSA",
			"PSArips.com  The.Boys.2019.S01E",
			"PSArips.com   The.Boys.2019.S01E",
			"PSArips.com   The.Boys.2019.S01E0",
			"_10bit_x265_720p_WEBRip_2CH_PSA_FilmZone",
			"Preacher.S04E",
			"10bit_x265_720p_WEBRip_2CH_PSA_FilmZone",
			"The_Boys_S01E01_10bit_x265_720p_WEBRip_2CH_PSA_FilmZone",
			"0bit_x265_720p",
			"Bodyguard.S01E01.",
			"Farda.DL",
			"720p.WEBRip.2CH.x265",
			"solve",
			"hash",
			"int",
			",",
			"power",
			"int",
			"-",
			"a",
			"hash",
			"pizza[i][n]",
			"right_half",
			"pizza[i][n+1]",
			"pizza[i][n]",
			"\t\tpizza[i][n]",
			" +=",
			"pizza[i][n] ",
			"pizza[i][n]",
			"pizza[i][n] ",
			"pizza[i][n]",
			"cout",
			"pizza",
			"right_half",
			"else",
			"left_half",
			"half",
			"t",
			"int",
			"#include <bits/stdc++.h>\n#define vi vector<int>\nusing namespace std;\n\nvi get_factors(int n)\n{\n    vi factors;\n    for(int i=1;i<n;i++)\n    {\n        if(n%i==0)\n            factors.push_back(i);\n    }\n    return factors;\n}\n\nint solve_rec(int n, int k)\n{\n    if(n==0 and k==0) return 1;\n    if((n==0 and k!=0) or (n!=0 and k==0)) return -1;\n\n    int ans = -1;\n\n    for(int factor: factors)\n    {\n        if(factor <= n)\n        {\n            int subproblem = solve_rec(n - factor, k - 1);\n            if (subproblem != -1)\n                ans = max(ans, subproblem * factor);\n        }\n    } \n    return ans;\n}\n\nint main()\n{\n    int t, n;\n    scanf(\"%d\", &t);\n    while(t--)\n    {\n        scanf(\"%d\", &n);\n        vi factors = get_factors(n);\n\n    } \n}",
			"solve_rec",
			"sub",
			"factors[j]",
			"remove_one_with_repitions",
			"isvalid",
			"each",
			"ans2",
			"each",
			"2",
			"each",
			"None",
			")",
			"val",
			"ans",
			"i",
			"vector",
			"*",
			"a",
			"an",
			"a",
			"k ",
			"k",
			"prime",
			"prime[",
			"prime",
			"false",
			"prime",
			"n",
			"1 * 3 + 1",
			"((i+1) % 3) * 3 + j",
			"i * 3 + j",
			"each",
			"%",
			"][",
			"unordered_set",
			"'",
			"[i]",
			"O",
			"grid",
			"O",
			"first",
			"[",
			"ans",
			"m",
			"def",
			"segment",
			"p1",
			"pol2",
			">>",
			"pol1",
			"vp",
			"a",
			"1",
			"p3",
			"p1",
			"p2",
			".x",
			"x",
			"pi",
			"x",
			"double",
			"pd",
			"pi",
			"int",
			"pair<int, int>",
			"vector<pair<int,int>>",
			"point_on_line",
			" ",
			"w",
			"radius",
			"int",
			"2",
			"31640",
			"i",
			"input()",
			"+",
			"Square",
			"add",
			"void",
			"int",
			"maginNum",
			"flag",
			"dist[i] + gas[i]",
			"dfs",
			"int",
			"INT_MAX"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lets-start-again/19-the-next-palindrome.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 948,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"git_savvy.repo_path": "/home/hthuwal/Competitive Programming/Programming",
							"markdonw_live_preview_last_run": 1570528788.16,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 686.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "project-euler/01-multiples-of-3-and-5.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 94,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								30
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": false,
							"git_savvy.repo_path": "/home/hthuwal/Competitive Programming/Programming",
							"open_with_edit": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 51.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.GitSavvy":
	{
		"height": 132.0
	},
	"output.autopep8":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 133.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.merlin":
	{
		"height": 120.0
	},
	"output.show_commit_info":
	{
		"height": 151.560317993
	},
	"pinned_build_system": "",
	"project": "Competitive.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"dijsktra",
				"SPOJ/easy-dijsktra.cpp"
			],
			[
				"kth",
				"SPOJ/kth-prime.cpp"
			],
			[
				"in",
				"SPOJ/in.txt"
			],
			[
				"in.t",
				"HackerEarth/in.txt"
			],
			[
				"in.",
				"HackerRank/in.txt"
			],
			[
				"spoj/in",
				"SPOJ/in.txt"
			],
			[
				"huge",
				"HackerEarth/huge-stones.py"
			],
			[
				"wet",
				"HackerEarth/wet-clothes.cpp"
			],
			[
				"ou",
				"HackerEarth/out.txt"
			],
			[
				"out2",
				"HackerEarth/out2.txt"
			],
			[
				"prima",
				"HackerRank/primality-sieve.cpp"
			],
			[
				"prime",
				"HackerRank/primality-fermat.cpp"
			],
			[
				"prim",
				"Algos_Implementation/primalitytest.cpp"
			],
			[
				"siev",
				"Mixed/cpp/sieve.cpp"
			],
			[
				"sieve",
				"HackerRank/primality-sieve.cpp"
			],
			[
				"painter",
				"Interview_bit/painters-partition-problem.md"
			],
			[
				"pani",
				"Interview_bit/painters-partition-problem.md"
			],
			[
				"travell",
				"SPOJ/travelling-salesman-problem.c"
			],
			[
				"hamilto",
				"Algos_Implementation/hamiltonian_walk_exists_or_not.cpp"
			],
			[
				"IN",
				"HackerRank/in.txt"
			],
			[
				"bit",
				"Algos_Implementation/fenwick-or-binary-index-tree.cpp"
			],
			[
				"trave",
				"SPOJ/travelling-salesman-problem.c"
			],
			[
				"task",
				"CodeForces/a-simple-task.cpp"
			],
			[
				"out",
				"HackerRank/out.txt"
			],
			[
				"o",
				"HackerRank/out1.txt"
			],
			[
				"out1",
				"HackerRank/out1.txt"
			],
			[
				"hami",
				"Algos_Implementation/hamiltonian_walk_exists_or_not.cpp"
			],
			[
				"hamil",
				"Algos_Implementation/hamiltonian_walk_exists_or_not.cpp"
			],
			[
				"jump",
				"LeetCode/jump-game.md"
			],
			[
				"min-l",
				"gfg/sum-of-leaf-nodes-at-min-level.md"
			],
			[
				"",
				".gitignore"
			],
			[
				"fen",
				"Algos_Implementation/fenwick-or-binary-index-tree.cpp"
			],
			[
				"test.py",
				"test.py"
			],
			[
				"primality-ferm",
				"HackerRank/primality-fermat.cpp"
			],
			[
				"pir",
				"Algos_Implementation/primalitytest.cpp"
			],
			[
				"primalt",
				"Algos_Implementation/primalitytest.cpp"
			],
			[
				"test.cpp",
				"HackerRank/test.cpp"
			],
			[
				"test",
				"test.py"
			],
			[
				"road",
				"HackerRank/roads-and-libraries.cpp"
			],
			[
				"shortest",
				"HackerRank/shortest-reach-2.cpp"
			],
			[
				"shor",
				"LeetCode/shortest-palindrome.cpp"
			],
			[
				"kmp",
				"Mixed/cpp/kmp.cpp"
			],
			[
				"in.txt",
				"gfg/in.txt"
			],
			[
				"assi",
				"SPOJ/assign.cpp"
			],
			[
				"hamilt",
				"Algos_Implementation/hamiltonian_walk_exists_or_not.cpp"
			],
			[
				"hamilton",
				"Mixed/cpp/words1-hamiltonian-path-backtracking.cpp"
			],
			[
				"cobb",
				"Mixed/cpp/cobbledstreets.cpp"
			],
			[
				"cobbl",
				"Mixed/cpp/cobbledstreets.cpp"
			],
			[
				"reach",
				"Miscellaneous/reach-the-value.cpp"
			],
			[
				"merger",
				"LeetCode/merge-intervals.md"
			],
			[
				"merge",
				"Algos_Implementation/sorts/merge_sort.cpp"
			],
			[
				"pred",
				"Miscellaneous/pred.txt"
			],
			[
				"qui",
				"Algos_Implementation/sorts/quick_sort.cpp"
			],
			[
				"quicsort",
				"Algos_Implementation/sorts/quick_sort.cpp"
			],
			[
				"csum",
				"SPOJ/csumq-fenwick.cpp"
			],
			[
				"inn",
				"Mixed/cpp/internetmediatypes.cpp"
			],
			[
				"segment",
				"Algos_Implementation/horriblequeries-segmenttreewithlazypropogation.cpp"
			],
			[
				"graph ",
				"Algos_Implementation/graphusingstl.cpp"
			],
			[
				"lcs",
				"HackerRank/lcs.cpp"
			],
			[
				"coin",
				"LeetCode/coin-change.md"
			],
			[
				"ass",
				"SPOJ/assign.cpp"
			],
			[
				"hamilo",
				"Algos_Implementation/hamiltonian_walk_exists_or_not.cpp"
			],
			[
				"bits",
				"Algos_Implementation/bit_operations.cpp"
			],
			[
				"simplear",
				"Mixed/cpp/simplearithmeticsii.cpp"
			],
			[
				"simp",
				"Mixed/python/simplearithmetics.py"
			],
			[
				"arith",
				"Mixed/cpp/simplearithmeticsii.cpp"
			],
			[
				"buglif",
				"Mixed/cpp/buglife.cpp"
			],
			[
				"2c",
				"Mixed/cpp/2colorableornot.cpp"
			],
			[
				"2colo",
				"Mixed/cpp/2colorableornot.cpp"
			],
			[
				"candi",
				"HackerRank/candies.cpp"
			],
			[
				"trie",
				"Mixed/cpp/trie-phone-list-using-trie.cpp"
			],
			[
				"graph",
				"Algos_Implementation/graphusingstl.cpp"
			],
			[
				"clone",
				"HackerRank/find-the-nearest-clone.cpp"
			],
			[
				"connec",
				"HackerRank/connected_cells_in_grid.cpp"
			],
			[
				"libra",
				"HackerRank/roads-and-libraries.cpp"
			],
			[
				"julia",
				"HackerRank/julia.py"
			],
			[
				"xor",
				"HackerRank/xor_queries.cpp"
			],
			[
				"int",
				"Mixed/cpp/intervalsandsubarrays.cpp"
			],
			[
				"csa",
				"Interview_bit/csagheer_and_nubian_market.py"
			],
			[
				"READ",
				"Mixed/Readme.md"
			],
			[
				"ada",
				"adahack.cpp"
			],
			[
				"invers",
				"inversion.cpp"
			],
			[
				"sege",
				"segmenttree.cpp"
			],
			[
				"segme",
				"segmenttree2.cpp"
			],
			[
				"pg.",
				"pg.txt"
			],
			[
				"ex",
				"exp.txt"
			],
			[
				"lazy",
				"horriblequeries-segmenttreewithlazypropogation.cpp"
			],
			[
				"fenw",
				"fenwick_or_binary_index_tree.cpp"
			],
			[
				"grap",
				"graphusingstl.cpp"
			],
			[
				"bi",
				"fenwick_or_binary_index_tree.cpp"
			],
			[
				"card",
				"cardgame.ml"
			],
			[
				"atom",
				"atoms.cpp"
			],
			[
				"rea",
				"README.md"
			],
			[
				"ream",
				"README.md"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 501.0,
		"last_filter": "notes",
		"selected_items":
		[
			[
				"notes",
				"~/dev/notes/notes.sublime-project"
			],
			[
				"",
				"~/dev/Scripts/Scripts.sublime-project"
			]
		],
		"width": 381.0
	},
	"select_symbol":
	{
		"height": 393.023928215,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 759.023928215
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 200.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
